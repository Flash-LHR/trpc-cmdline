// Code generated by trpc-go/trpc-cmdline. DO NOT EDIT.
// source: helloworld.proto

package helloworld

import (
	"context"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	_ "trpc.group/trpc-go/trpc-go/http"

	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	"trpc.group/trpc-go/trpc-go/server"
)

/* ************************************ Service Definition ************************************ */

// HelloworldSvrService defines service
type HelloworldSvrService interface {

	// Hello Hello say hello
	Hello(ctx context.Context, req *HelloReq, rsp *HelloRsp) (err error)
}

func HelloworldSvrService_Hello_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &HelloReq{}
	rsp := &HelloRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(HelloworldSvrService).Hello(ctx, reqbody.(*HelloReq), rspbody.(*HelloRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// HelloworldSvrServer_ServiceDesc descriptor for server.RegisterService
var HelloworldSvrServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "helloworld.helloworld_svr",
	HandlerType: ((*HelloworldSvrService)(nil)),
	Methods: []server.Method{
		{
			Name: "/helloworld.helloworld_svr/Hello",
			Func: HelloworldSvrService_Hello_Handler,
		},
	},
}

// RegisterHelloworldSvrService register service
func RegisterHelloworldSvrService(s server.Service, svr HelloworldSvrService) {
	if err := s.Register(&HelloworldSvrServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("HelloworldSvr register error:%v", err))
	}

}

/* ************************************ Client Definition ************************************ */

// HelloworldSvrClientProxy defines service client proxy
type HelloworldSvrClientProxy interface {

	// Hello Hello say hello
	Hello(ctx context.Context, req *HelloReq, opts ...client.Option) (rsp *HelloRsp, err error)
}

type HelloworldSvrClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewHelloworldSvrClientProxy = func(opts ...client.Option) HelloworldSvrClientProxy {
	return &HelloworldSvrClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *HelloworldSvrClientProxyImpl) Hello(ctx context.Context, req *HelloReq, opts ...client.Option) (rsp *HelloRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/helloworld.helloworld_svr/Hello")
	msg.WithCalleeServiceName(HelloworldSvrServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("helloworld_svr")
	msg.WithCalleeMethod("Hello")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp = &HelloRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}
